{"ast":null,"code":"import axios from 'axios';\nexport const loadUser = () => dispatch => {\n  if (localStorage.token) {\n    setAuthToken(localStorage.token);\n  }\n\n  axios.get(\"/auth\").then(response => {\n    dispatch({\n      type: USER_LOADED,\n      payload: response.data\n    });\n  }).catch(err => {\n    console.log(\"There was an error validating the token \" + err);\n    dispatch({\n      type: USER_AUTH_FAILURE\n    });\n  });\n};\nexport const register = (firstname, lastname, age, email, password, address, gender) => dispatch => {\n  const body = JSON.stringify({\n    firstname,\n    lastname,\n    age,\n    email,\n    password,\n    address,\n    gender\n  });\n  const config = {\n    headers: {\n      'Content-type': 'application/json'\n    }\n  };\n  axios.post('/signUpForm', body, config).then(response => {\n    console.log(response.data);\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: response.data\n    });\n    dispatch(loadUser());\n  }).catch(err => {\n    console.log(\"Error exists while trying to register user \" + err);\n    dispatch({\n      type: REGISTER_FAILURE\n    });\n  });\n};\nexport const login = (email, password) => dispatch => {\n  const body = JSON.stringify({\n    email,\n    password\n  });\n  const config = {\n    headers: {\n      'Content-type': 'application/json'\n    }\n  };\n  axios.post(\"/loginSubmitForm\", body, config).then(response => {\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: response.data\n    });\n    dispatch(loadUser());\n  }).catch(err => {\n    console.log(\"There was an error validating login credentials \" + err);\n    dispatch({\n      type: LOGIN_FAILURE\n    });\n  });\n};","map":{"version":3,"sources":["/Users/fresh/Desktop/Projects/Green Kart Web-App/Green-Kart-Web-App/front-end/react-server/src/redux/action/authAction.js"],"names":["axios","loadUser","dispatch","localStorage","token","setAuthToken","get","then","response","type","USER_LOADED","payload","data","catch","err","console","log","USER_AUTH_FAILURE","register","firstname","lastname","age","email","password","address","gender","body","JSON","stringify","config","headers","post","REGISTER_SUCCESS","REGISTER_FAILURE","login","LOGIN_SUCCESS","LOGIN_FAILURE"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAO,MAAMC,QAAQ,GAAG,MAAOC,QAAD,IAAc;AACxC,MAAIC,YAAY,CAACC,KAAjB,EAAuB;AACnBC,IAAAA,YAAY,CAACF,YAAY,CAACC,KAAd,CAAZ;AACH;;AACGJ,EAAAA,KAAK,CAACM,GAAN,CAAU,OAAV,EACCC,IADD,CACMC,QAAQ,IAAI;AAEdN,IAAAA,QAAQ,CAAC;AACLO,MAAAA,IAAI,EAAEC,WADD;AAELC,MAAAA,OAAO,EAAEH,QAAQ,CAACI;AAFb,KAAD,CAAR;AAIH,GAPD,EAQCC,KARD,CAQOC,GAAG,IAAI;AACVC,IAAAA,OAAO,CAACC,GAAR,CAAY,6CAA6CF,GAAzD;AAEAZ,IAAAA,QAAQ,CAAC;AACLO,MAAAA,IAAI,EAAEQ;AADD,KAAD,CAAR;AAGH,GAdD;AAeP,CAnBM;AAqBP,OAAO,MAAMC,QAAQ,GAAG,CAACC,SAAD,EAAYC,QAAZ,EAAsBC,GAAtB,EAA2BC,KAA3B,EAAkCC,QAAlC,EAA4CC,OAA5C,EAAqDC,MAArD,KAAiEvB,QAAD,IAAc;AAClG,QAAMwB,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAe;AAACT,IAAAA,SAAD;AAAYC,IAAAA,QAAZ;AAAsBC,IAAAA,GAAtB;AAA2BC,IAAAA,KAA3B;AAAkCC,IAAAA,QAAlC;AAA4CC,IAAAA,OAA5C;AAAqDC,IAAAA;AAArD,GAAf,CAAb;AAEA,QAAMI,MAAM,GAAG;AACXC,IAAAA,OAAO,EAAG;AACN,sBAAgB;AADV;AADC,GAAf;AAMA9B,EAAAA,KAAK,CAAC+B,IAAN,CAAW,aAAX,EAA0BL,IAA1B,EAAgCG,MAAhC,EACCtB,IADD,CACMC,QAAQ,IAAI;AACdO,IAAAA,OAAO,CAACC,GAAR,CAAYR,QAAQ,CAACI,IAArB;AAEAV,IAAAA,QAAQ,CAAC;AACLO,MAAAA,IAAI,EAAEuB,gBADD;AAELrB,MAAAA,OAAO,EAAEH,QAAQ,CAACI;AAFb,KAAD,CAAR;AAKAV,IAAAA,QAAQ,CAACD,QAAQ,EAAT,CAAR;AACH,GAVD,EAWCY,KAXD,CAWOC,GAAG,IAAI;AACVC,IAAAA,OAAO,CAACC,GAAR,CAAY,gDAAgDF,GAA5D;AAEAZ,IAAAA,QAAQ,CAAC;AACLO,MAAAA,IAAI,EAAEwB;AADD,KAAD,CAAR;AAGH,GAjBD;AAkBH,CA3BM;AA6BP,OAAO,MAAMC,KAAK,GAAG,CAACZ,KAAD,EAAQC,QAAR,KAAsBrB,QAAD,IAAc;AAEpD,QAAMwB,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAe;AAACN,IAAAA,KAAD;AAAQC,IAAAA;AAAR,GAAf,CAAb;AACA,QAAMM,MAAM,GAAG;AAEXC,IAAAA,OAAO,EAAG;AACN,sBAAgB;AADV;AAFC,GAAf;AAOA9B,EAAAA,KAAK,CAAC+B,IAAN,CAAW,kBAAX,EAA+BL,IAA/B,EAAqCG,MAArC,EACCtB,IADD,CACMC,QAAQ,IAAI;AAEdN,IAAAA,QAAQ,CAAC;AACLO,MAAAA,IAAI,EAAE0B,aADD;AAELxB,MAAAA,OAAO,EAAEH,QAAQ,CAACI;AAFb,KAAD,CAAR;AAKAV,IAAAA,QAAQ,CAACD,QAAQ,EAAT,CAAR;AACH,GATD,EAUCY,KAVD,CAUOC,GAAG,IAAI;AACVC,IAAAA,OAAO,CAACC,GAAR,CAAY,qDAAqDF,GAAjE;AAEAZ,IAAAA,QAAQ,CAAC;AACLO,MAAAA,IAAI,EAAE2B;AADD,KAAD,CAAR;AAGH,GAhBD;AAiBH,CA3BM","sourcesContent":["import axios from 'axios';\n\nexport const loadUser = () => (dispatch) => {\n    if (localStorage.token){\n        setAuthToken(localStorage.token);\n    }\n        axios.get(\"/auth\")\n        .then(response => {\n\n            dispatch({\n                type: USER_LOADED,\n                payload: response.data\n            });\n        })\n        .catch(err => {\n            console.log(\"There was an error validating the token \" + err);\n\n            dispatch({\n                type: USER_AUTH_FAILURE\n            });\n        });\n}\n\nexport const register = (firstname, lastname, age, email, password, address, gender) => (dispatch) => {\n    const body = JSON.stringify({firstname, lastname, age, email, password, address, gender});\n\n    const config = {\n        headers : {\n            'Content-type': 'application/json'\n        }\n    };\n\n    axios.post('/signUpForm', body, config)\n    .then(response => {\n        console.log(response.data);\n\n        dispatch({\n            type: REGISTER_SUCCESS,\n            payload: response.data\n        });\n\n        dispatch(loadUser());\n    })\n    .catch(err => {\n        console.log(\"Error exists while trying to register user \" + err);\n\n        dispatch({\n            type: REGISTER_FAILURE\n        });\n    });\n}\n\nexport const login = (email, password) => (dispatch) => {\n     \n    const body = JSON.stringify({email, password});\n    const config = {\n\n        headers : {\n            'Content-type': 'application/json'\n        }\n    };\n\n    axios.post(\"/loginSubmitForm\", body, config)\n    .then(response => {\n\n        dispatch({\n            type: LOGIN_SUCCESS, \n            payload: response.data\n        });\n\n        dispatch(loadUser());\n    })\n    .catch(err => {\n        console.log(\"There was an error validating login credentials \" + err);\n\n        dispatch({\n            type: LOGIN_FAILURE\n        });\n    });\n}"]},"metadata":{},"sourceType":"module"}