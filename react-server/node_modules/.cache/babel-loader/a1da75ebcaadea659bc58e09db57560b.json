{"ast":null,"code":"var _jsxFileName = \"/Users/fresh/Desktop/Green Kart Web-App/Green-Kart-Web-App/front-end/react-server/src/Component/Productgrid/productgrid.jsx\";\nimport React, { Component } from 'react';\nimport Productcard from '../Productcard/productcard';\nimport Navbar from '../Navbar/navbar';\nimport Footer from '../Footer/footer';\nimport './productgrid.css';\nimport Costdashboard from '../Costdashboard/costdashboard';\n\nclass Productgrid extends Component {\n  constructor() {\n    super();\n\n    this.updateIncrementValue = id => {\n      var prod = this.state.product;\n      var cost = this.state.totalCost;\n      var addUniqueItem = prod[id - 1].quantity == 0 ? 1 : 0;\n      var newUniqueValue = this.state.uniqueItems;\n      var quantity = this.state.totalQuantity;\n      var newQuantity = quantity + 1;\n      prod[id - 1].quantity = prod[id - 1].quantity + 1;\n      cost += prod[id - 1].price;\n      this.setState({\n        product: prod,\n        totalCost: cost,\n        uniqueItems: newUniqueValue + addUniqueItem,\n        totalQuantity: newQuantity\n      });\n    };\n\n    this.updateDecrementValue = id => {\n      var prod = this.state.product;\n      var cost = this.state.totalCost;\n      prod[id - 1].quantity = prod[id - 1].quantity - 1;\n      cost -= prod[id - 1].price;\n      var uniqueItemCount = prod[id - 1].quantity == 0 ? 1 : 0;\n      var uniqueItemCountValue = this.state.uniqueItems;\n      var quantity = this.state.totalQuantity;\n      var newQuantity = quantity - 1;\n      this.setState({\n        product: prod,\n        totalCost: cost,\n        uniqueItems: uniqueItemCountValue - uniqueItemCount,\n        totalQuantity: newQuantity\n      });\n    };\n\n    this.updateResetValue = id => {\n      var prod = this.state.product;\n      var cost = this.state.totalCost;\n      cost -= prod[id - 1].quantity * prod[id - 1].price;\n      var totalQuantity = this.state.totalQuantity;\n      var newTotalQuantity = totalQuantity - prod[id - 1].quantity;\n      var uniqueQuantity = this.state.uniqueItems;\n      var newUniqueQuantity = prod[id - 1].quantity == 0 ? 0 : 1;\n      uniqueQuantity -= newUniqueQuantity;\n      prod[id - 1].quantity = 0;\n      this.setState({\n        product: prod,\n        totalCost: cost,\n        totalQuantity: newTotalQuantity,\n        uniqueItems: uniqueQuantity\n      });\n    };\n\n    const names = ['Artichoke', 'Asparagus', 'Avocado', 'Bok Choy', 'Broccoli', 'Brussel Sprouts', 'Cabbage', 'Califlower', 'Celery', 'Chilli', 'Clover', 'Collard Green', 'Corn', 'Cucumber', 'Green Beans', 'Green Pepper', 'Kale', 'Leek', 'Lettuce', 'Mint', 'Mustard Green', 'Okra', 'Parsley', 'Peas', 'Plantain', 'Spinach', 'Squash', 'Swiss Chard', 'Watercress', 'Zucchini'];\n    var products = [];\n    var startingCost = 1.25;\n\n    for (var i = 0; i < names.length; i++) {\n      products.push({\n        id: i + 1,\n        name: names[i],\n        quantity: 0,\n        price: startingCost\n      });\n      startingCost += 0.25;\n    }\n\n    this.state = {\n      product: products,\n      totalCost: 0.00,\n      totalQuantity: 0,\n      uniqueItems: 0\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"product-grid col-centered\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"h5\", {\n      className: \"inventory-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 21\n      }\n    }, \"Inventory (Maximum five per item)\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row mx-auto\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 21\n      }\n    }, this.state.product.map(item => /*#__PURE__*/React.createElement(Productcard, {\n      key: item.id,\n      product: item,\n      onIncrement: this.updateIncrementValue,\n      onReset: this.updateResetValue,\n      onDecrement: this.updateDecrementValue,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 25\n      }\n    }))), /*#__PURE__*/React.createElement(Costdashboard, {\n      cost: this.state.totalCost,\n      quantity: this.state.totalQuantity,\n      uniqueItems: this.state.uniqueItems,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 25\n      }\n    })), /*#__PURE__*/React.createElement(Footer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\n\nexport default Productgrid;","map":{"version":3,"sources":["/Users/fresh/Desktop/Green Kart Web-App/Green-Kart-Web-App/front-end/react-server/src/Component/Productgrid/productgrid.jsx"],"names":["React","Component","Productcard","Navbar","Footer","Costdashboard","Productgrid","constructor","updateIncrementValue","id","prod","state","product","cost","totalCost","addUniqueItem","quantity","newUniqueValue","uniqueItems","totalQuantity","newQuantity","price","setState","updateDecrementValue","uniqueItemCount","uniqueItemCountValue","updateResetValue","newTotalQuantity","uniqueQuantity","newUniqueQuantity","names","products","startingCost","i","length","push","name","render","map","item"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Productcard from '../Productcard/productcard';\nimport Navbar from '../Navbar/navbar';\nimport Footer from '../Footer/footer';\nimport './productgrid.css';\nimport Costdashboard from '../Costdashboard/costdashboard';\n\n\nclass Productgrid extends Component {\n    constructor() {\n        super();\n\n        const names = ['Artichoke', 'Asparagus', 'Avocado', 'Bok Choy', \n        'Broccoli', 'Brussel Sprouts', 'Cabbage', 'Califlower', 'Celery', 'Chilli', 'Clover',\n        'Collard Green', 'Corn', 'Cucumber', 'Green Beans', 'Green Pepper', 'Kale', 'Leek', 'Lettuce', \n        'Mint', 'Mustard Green', 'Okra', 'Parsley', 'Peas', 'Plantain', 'Spinach', 'Squash', \n        'Swiss Chard', 'Watercress', 'Zucchini'];\n        \n        var products = [];\n        var startingCost = 1.25;\n\n        for (var i = 0; i < names.length; i++){\n            products.push({id: i+1, name: names[i], quantity: 0, price: startingCost});\n            startingCost += 0.25;\n        }\n\n        this.state = {\n            product: products,\n            totalCost: 0.00,\n            totalQuantity: 0,\n            uniqueItems: 0\n        }\n    }\n    \n    updateIncrementValue = (id) => {\n        var prod = this.state.product;\n        var cost = this.state.totalCost;\n\n        var addUniqueItem = prod[id - 1].quantity == 0 ? 1 : 0;\n        var newUniqueValue = this.state.uniqueItems;\n\n        var quantity = this.state.totalQuantity;\n        var newQuantity = quantity + 1;\n\n        prod[id - 1].quantity = prod[id - 1].quantity + 1;\n        cost += prod[id - 1].price;\n\n        this.setState({product: prod, totalCost: cost, uniqueItems: newUniqueValue + addUniqueItem, \n            totalQuantity: newQuantity}); \n    };\n\n    updateDecrementValue = (id) => {\n        var prod = this.state.product;\n        var cost = this.state.totalCost;\n\n        prod[id - 1].quantity = prod[id - 1].quantity - 1;\n        cost -= prod[id - 1].price;\n\n        var uniqueItemCount = prod[id - 1].quantity == 0 ? 1 : 0;\n        var uniqueItemCountValue = this.state.uniqueItems;\n\n        var quantity = this.state.totalQuantity;\n        var newQuantity = quantity - 1;\n\n        this.setState({product: prod, totalCost: cost, uniqueItems: uniqueItemCountValue - uniqueItemCount, totalQuantity: newQuantity});\n    };\n\n    updateResetValue = (id) => {\n        var prod = this.state.product;\n        var cost = this.state.totalCost;\n\n        cost -= prod[id - 1].quantity * prod[id - 1].price;\n\n        var totalQuantity = this.state.totalQuantity;\n        var newTotalQuantity =  totalQuantity - prod[id - 1].quantity;\n\n        var uniqueQuantity = this.state.uniqueItems;\n        var newUniqueQuantity = prod[id - 1].quantity == 0 ? 0 : 1;\n\n        uniqueQuantity -= newUniqueQuantity;\n\n        prod[id - 1].quantity = 0;\n\n        this.setState({product: prod, totalCost: cost, totalQuantity: newTotalQuantity, uniqueItems: uniqueQuantity});\n    }\n\n    render() {\n        return (\n            <div className=\"product-grid col-centered\">\n                <div className=\"container\">\n                    <h5 className=\"inventory-title\">Inventory (Maximum five per item)</h5>\n                    <div className=\"row mx-auto\">\n                        {this.state.product.map(item => \n                        <Productcard key={item.id} product={item}\n                        onIncrement={this.updateIncrementValue} onReset={this.updateResetValue} onDecrement={this.updateDecrementValue} />)}\n                    </div> \n                        <Costdashboard cost={this.state.totalCost} quantity={this.state.totalQuantity} uniqueItems={this.state.uniqueItems} />\n                </div>\n                <Footer />\n            </div>\n        );\n    }\n}\n\nexport default Productgrid;"]},"metadata":{},"sourceType":"module"}