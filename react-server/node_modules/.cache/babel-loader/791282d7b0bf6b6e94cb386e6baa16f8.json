{"ast":null,"code":"var _jsxFileName = \"/Users/fresh/Desktop/Projects/Green Kart Web-App/Green-Kart-Web-App/front-end/react-server/src/Component/ProductGrid/productgrid.jsx\";\nimport React, { useState } from 'react';\nimport ProductCard from '../ProductCard/productcard';\nimport './productgrid.css';\nimport CostDashboard from '../CostDashboard/costdashboard';\n\nconst ProductGrid = () => {\n  const names = ['Artichoke', 'Asparagus', 'Avocado', 'Bok Choy', 'Broccoli', 'Brussel Sprouts', 'Cabbage', 'Califlower', 'Celery', 'Chilli', 'Clover', 'Collard Green', 'Corn', 'Cucumber', 'Green Beans', 'Green Pepper', 'Kale', 'Leek', 'Lettuce', 'Mint', 'Mustard Green', 'Okra', 'Parsley', 'Peas', 'Plantain', 'Spinach', 'Squash', 'Swiss Chard', 'Watercress', 'Zucchini'];\n  var products = [];\n  var startingCost = 1.25;\n\n  for (var i = 0; i < names.length; i++) {\n    products.push({\n      id: i + 1,\n      name: names[i],\n      quantity: 0,\n      price: startingCost\n    });\n    startingCost += 0.25;\n  }\n\n  const [productList, updateProductList] = useState(products);\n  const [totalCost, updateTotalCost] = useState(0.0);\n  const [totalQuantity, updateTotalQuantity] = useState(0);\n  const [uniqueItems, updateUniqueItems] = useState(0);\n\n  const updateIncrementValue = id => {\n    var prod = productList;\n    var cost = totalCost;\n    var addUniqueItem = prod[id - 1].quantity == 0 ? 1 : 0;\n    var newUniqueValue = uniqueItems;\n    var quantity = this.state.totalQuantity;\n    var newQuantity = quantity + 1;\n    prod[id - 1].quantity = prod[id - 1].quantity + 1;\n    cost += prod[id - 1].price;\n    this.setState({\n      product: prod,\n      totalCost: cost,\n      uniqueItems: newUniqueValue + addUniqueItem,\n      totalQuantity: newQuantity\n    });\n  };\n\n  const updateDecrementValue = id => {\n    var prod = this.state.product;\n    var cost = this.state.totalCost;\n    prod[id - 1].quantity = prod[id - 1].quantity - 1;\n    cost -= prod[id - 1].price;\n    var uniqueItemCount = prod[id - 1].quantity == 0 ? 1 : 0;\n    var uniqueItemCountValue = this.state.uniqueItems;\n    var quantity = this.state.totalQuantity;\n    var newQuantity = quantity - 1;\n    this.setState({\n      product: prod,\n      totalCost: cost,\n      uniqueItems: uniqueItemCountValue - uniqueItemCount,\n      totalQuantity: newQuantity\n    });\n  };\n\n  const updateResetValue = id => {\n    var prod = this.state.product;\n    var cost = this.state.totalCost;\n    cost -= prod[id - 1].quantity * prod[id - 1].price;\n    var totalQuantity = this.state.totalQuantity;\n    var newTotalQuantity = totalQuantity - prod[id - 1].quantity;\n    var uniqueQuantity = this.state.uniqueItems;\n    var newUniqueQuantity = prod[id - 1].quantity == 0 ? 0 : 1;\n    uniqueQuantity -= newUniqueQuantity;\n    prod[id - 1].quantity = 0;\n    this.setState({\n      product: prod,\n      totalCost: cost,\n      totalQuantity: newTotalQuantity,\n      uniqueItems: uniqueQuantity\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"product-grid col-centered\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"h5\", {\n    className: \"inventory-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 21\n    }\n  }, \"Inventory (Maximum five per item)\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row mx-auto\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 21\n    }\n  }, this.state.product.map(item => /*#__PURE__*/React.createElement(ProductCard, {\n    key: item.id,\n    product: item,\n    onIncrement: this.updateIncrementValue,\n    onReset: this.updateResetValue,\n    onDecrement: this.updateDecrementValue,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 25\n    }\n  }))), /*#__PURE__*/React.createElement(CostDashboard, {\n    product: this.state.product,\n    cost: this.state.totalCost,\n    quantity: this.state.totalQuantity,\n    uniqueItems: this.state.uniqueItems,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 25\n    }\n  })));\n};\n\nexport default ProductGrid;","map":{"version":3,"sources":["/Users/fresh/Desktop/Projects/Green Kart Web-App/Green-Kart-Web-App/front-end/react-server/src/Component/ProductGrid/productgrid.jsx"],"names":["React","useState","ProductCard","CostDashboard","ProductGrid","names","products","startingCost","i","length","push","id","name","quantity","price","productList","updateProductList","totalCost","updateTotalCost","totalQuantity","updateTotalQuantity","uniqueItems","updateUniqueItems","updateIncrementValue","prod","cost","addUniqueItem","newUniqueValue","state","newQuantity","setState","product","updateDecrementValue","uniqueItemCount","uniqueItemCountValue","updateResetValue","newTotalQuantity","uniqueQuantity","newUniqueQuantity","map","item"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport ProductCard from '../ProductCard/productcard';\nimport './productgrid.css';\nimport CostDashboard from '../CostDashboard/costdashboard';\n\nconst ProductGrid = () => {\n    \n        const names = ['Artichoke', 'Asparagus', 'Avocado', 'Bok Choy', \n        'Broccoli', 'Brussel Sprouts', 'Cabbage', 'Califlower', 'Celery', 'Chilli', 'Clover',\n        'Collard Green', 'Corn', 'Cucumber', 'Green Beans', 'Green Pepper', 'Kale', 'Leek', 'Lettuce', \n        'Mint', 'Mustard Green', 'Okra', 'Parsley', 'Peas', 'Plantain', 'Spinach', 'Squash', \n        'Swiss Chard', 'Watercress', 'Zucchini'];\n        \n        var products = [];\n        var startingCost = 1.25;\n\n        for (var i = 0; i < names.length; i++){\n            products.push({id: i+1, name: names[i], quantity: 0, price: startingCost});\n            startingCost += 0.25;\n        }\n\n        const [productList, updateProductList] = useState(products);\n        const [totalCost, updateTotalCost] = useState(0.0);\n        const [totalQuantity, updateTotalQuantity] = useState(0);\n        const [uniqueItems, updateUniqueItems] = useState(0);\n    \n    const updateIncrementValue = (id) => {\n        var prod = productList;\n        var cost = totalCost;\n\n        var addUniqueItem = prod[id - 1].quantity == 0 ? 1 : 0;\n        var newUniqueValue = uniqueItems;\n\n        var quantity = this.state.totalQuantity;\n        var newQuantity = quantity + 1;\n\n        prod[id - 1].quantity = prod[id - 1].quantity + 1;\n        cost += prod[id - 1].price;\n\n        this.setState({product: prod, totalCost: cost, uniqueItems: newUniqueValue + addUniqueItem, \n            totalQuantity: newQuantity}); \n    };\n\n    const updateDecrementValue = (id) => {\n        var prod = this.state.product;\n        var cost = this.state.totalCost;\n\n        prod[id - 1].quantity = prod[id - 1].quantity - 1;\n        cost -= prod[id - 1].price;\n\n        var uniqueItemCount = prod[id - 1].quantity == 0 ? 1 : 0;\n        var uniqueItemCountValue = this.state.uniqueItems;\n\n        var quantity = this.state.totalQuantity;\n        var newQuantity = quantity - 1;\n\n        this.setState({product: prod, totalCost: cost, uniqueItems: uniqueItemCountValue - uniqueItemCount, totalQuantity: newQuantity});\n    };\n\n    const updateResetValue = (id) => {\n        var prod = this.state.product;\n        var cost = this.state.totalCost;\n\n        cost -= prod[id - 1].quantity * prod[id - 1].price;\n\n        var totalQuantity = this.state.totalQuantity;\n        var newTotalQuantity =  totalQuantity - prod[id - 1].quantity;\n\n        var uniqueQuantity = this.state.uniqueItems;\n        var newUniqueQuantity = prod[id - 1].quantity == 0 ? 0 : 1;\n\n        uniqueQuantity -= newUniqueQuantity;\n\n        prod[id - 1].quantity = 0;\n\n        this.setState({product: prod, totalCost: cost, totalQuantity: newTotalQuantity, uniqueItems: uniqueQuantity});\n    }\n\n    return (\n            <div className=\"product-grid col-centered\">\n                <div className=\"container\">\n                    <h5 className=\"inventory-title\">Inventory (Maximum five per item)</h5>\n                    <div className=\"row mx-auto\">\n                        {this.state.product.map(item => \n                        <ProductCard key={item.id} product={item}\n                        onIncrement={this.updateIncrementValue} onReset={this.updateResetValue} onDecrement={this.updateDecrementValue} />)}\n                    </div> \n                        <CostDashboard product={this.state.product} cost={this.state.totalCost} quantity={this.state.totalQuantity} uniqueItems={this.state.uniqueItems} />\n                </div>\n            </div>\n        );\n    }\n\nexport default ProductGrid;"]},"metadata":{},"sourceType":"module"}